/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { RequestConfig, ResponseErrorConfig, ResponseConfig } from '@kubb/plugin-client/clients/axios'
import type { InfiniteData, QueryKey, QueryClient, InfiniteQueryObserverOptions, UseInfiniteQueryResult } from '@tanstack/react-query'
import type { GetQueryResponse } from "../../types/'MaterialClassification.MainWebApiController/Get.ts"
import { infiniteQueryOptions, useInfiniteQuery } from '@tanstack/react-query'

export const getInfiniteQueryKey = () => [{ url: '/' }] as const

export type GetInfiniteQueryKey = ReturnType<typeof getInfiniteQueryKey>

/**
 * {@link /}
 */
export async function getInfinite(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<GetQueryResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'GET',
    url: `/`,
    baseURL: 'http://localhost:5269/',
    ...requestConfig,
  })
  return res
}

export function getInfiniteQueryOptions(config: Partial<RequestConfig> & { client?: typeof client } = {}) {
  const queryKey = getInfiniteQueryKey()
  return infiniteQueryOptions<ResponseConfig<GetQueryResponse>, ResponseErrorConfig<Error>, ResponseConfig<GetQueryResponse>, typeof queryKey>({
    queryKey,
    queryFn: async ({ signal }) => {
      config.signal = signal
      return getInfinite(config)
    },
    initialPageParam: 0,
    getNextPageParam: (lastPage) => lastPage['nextCursor'],
    getPreviousPageParam: (firstPage) => firstPage['nextCursor'],
  })
}

/**
 * {@link /}
 */
export function useGetInfinite<
  TData = InfiniteData<ResponseConfig<GetQueryResponse>>,
  TQueryData = ResponseConfig<GetQueryResponse>,
  TQueryKey extends QueryKey = GetInfiniteQueryKey,
>(
  options: {
    query?: Partial<InfiniteQueryObserverOptions<ResponseConfig<GetQueryResponse>, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & {
      client?: QueryClient
    }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { query: { client: queryClient, ...queryOptions } = {}, client: config = {} } = options ?? {}
  const queryKey = queryOptions?.queryKey ?? getInfiniteQueryKey()

  const query = useInfiniteQuery(
    {
      ...(getInfiniteQueryOptions(config) as unknown as InfiniteQueryObserverOptions),
      queryKey,
      ...(queryOptions as unknown as Omit<InfiniteQueryObserverOptions, 'queryKey'>),
    },
    queryClient,
  ) as UseInfiniteQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}