/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  PostClassificationWaitforclassificationtaskresultMutationResponse,
  PostClassificationWaitforclassificationtaskresultQueryParams,
} from "../../types/'ClassificationController/PostClassificationWaitforclassificationtaskresult.ts"
import { useMutation } from '@tanstack/react-query'

export const postClassificationWaitforclassificationtaskresultMutationKey = () => [{ url: '/Classification/WaitForClassificationTaskResult' }] as const

export type PostClassificationWaitforclassificationtaskresultMutationKey = ReturnType<typeof postClassificationWaitforclassificationtaskresultMutationKey>

/**
 * {@link /Classification/WaitForClassificationTaskResult}
 */
export async function postClassificationWaitforclassificationtaskresult(
  params?: PostClassificationWaitforclassificationtaskresultQueryParams,
  config: Partial<RequestConfig> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<PostClassificationWaitforclassificationtaskresultMutationResponse, ResponseErrorConfig<Error>, unknown>({
    method: 'POST',
    url: `/Classification/WaitForClassificationTaskResult`,
    baseURL: 'http://localhost:5269/',
    params,
    ...requestConfig,
  })
  return res
}

/**
 * {@link /Classification/WaitForClassificationTaskResult}
 */
export function usePostClassificationWaitforclassificationtaskresult<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<PostClassificationWaitforclassificationtaskresultMutationResponse>,
      ResponseErrorConfig<Error>,
      { params?: PostClassificationWaitforclassificationtaskresultQueryParams },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? postClassificationWaitforclassificationtaskresultMutationKey()

  return useMutation<
    ResponseConfig<PostClassificationWaitforclassificationtaskresultMutationResponse>,
    ResponseErrorConfig<Error>,
    { params?: PostClassificationWaitforclassificationtaskresultQueryParams },
    TContext
  >(
    {
      mutationFn: async ({ params }) => {
        return postClassificationWaitforclassificationtaskresult(params, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}