/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  PostClassificationSendtoclassifyMutationRequest,
  PostClassificationSendtoclassifyMutationResponse,
} from "../../types/'ClassificationController/PostClassificationSendtoclassify.ts"
import { useMutation } from '@tanstack/react-query'

export const postClassificationSendtoclassifyMutationKey = () => [{ url: '/Classification/SendToClassify' }] as const

export type PostClassificationSendtoclassifyMutationKey = ReturnType<typeof postClassificationSendtoclassifyMutationKey>

/**
 * {@link /Classification/SendToClassify}
 */
export async function postClassificationSendtoclassify(
  data?: PostClassificationSendtoclassifyMutationRequest,
  config: Partial<RequestConfig<PostClassificationSendtoclassifyMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const formData = new FormData()
  if (data) {
    Object.keys(data).forEach((key) => {
      const value = data[key as keyof typeof data]
      if (typeof key === 'string' && (typeof value === 'string' || (value as Blob) instanceof Blob)) {
        formData.append(key, value as unknown as string)
      }
    })
  }
  const res = await request<PostClassificationSendtoclassifyMutationResponse, ResponseErrorConfig<Error>, PostClassificationSendtoclassifyMutationRequest>({
    method: 'POST',
    url: `/Classification/SendToClassify`,
    baseURL: 'http://localhost:5269/',
    data: formData,
    ...requestConfig,
    headers: { 'Content-Type': 'multipart/form-data', ...requestConfig.headers },
  })
  return res
}

/**
 * {@link /Classification/SendToClassify}
 */
export function usePostClassificationSendtoclassify<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<PostClassificationSendtoclassifyMutationResponse>,
      ResponseErrorConfig<Error>,
      { data?: PostClassificationSendtoclassifyMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<PostClassificationSendtoclassifyMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? postClassificationSendtoclassifyMutationKey()

  return useMutation<
    ResponseConfig<PostClassificationSendtoclassifyMutationResponse>,
    ResponseErrorConfig<Error>,
    { data?: PostClassificationSendtoclassifyMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return postClassificationSendtoclassify(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}