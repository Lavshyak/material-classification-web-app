/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

import client from '@kubb/plugin-client/clients/axios'
import type { RequestConfig, ResponseConfig, ResponseErrorConfig } from '@kubb/plugin-client/clients/axios'
import type { UseMutationOptions, QueryClient } from '@tanstack/react-query'
import type {
  PostClassificationWaitforclassificationtaskresultmultiplyMutationRequest,
  PostClassificationWaitforclassificationtaskresultmultiplyMutationResponse,
} from "../../types/'ClassificationController/PostClassificationWaitforclassificationtaskresultmultiply.ts"
import { useMutation } from '@tanstack/react-query'

export const postClassificationWaitforclassificationtaskresultmultiplyMutationKey = () =>
  [{ url: '/Classification/WaitForClassificationTaskResultMultiply' }] as const

export type PostClassificationWaitforclassificationtaskresultmultiplyMutationKey = ReturnType<
  typeof postClassificationWaitforclassificationtaskresultmultiplyMutationKey
>

/**
 * {@link /Classification/WaitForClassificationTaskResultMultiply}
 */
export async function postClassificationWaitforclassificationtaskresultmultiply(
  data?: PostClassificationWaitforclassificationtaskresultmultiplyMutationRequest,
  config: Partial<RequestConfig<PostClassificationWaitforclassificationtaskresultmultiplyMutationRequest>> & { client?: typeof client } = {},
) {
  const { client: request = client, ...requestConfig } = config

  const res = await request<
    PostClassificationWaitforclassificationtaskresultmultiplyMutationResponse,
    ResponseErrorConfig<Error>,
    PostClassificationWaitforclassificationtaskresultmultiplyMutationRequest
  >({
    method: 'POST',
    url: `/Classification/WaitForClassificationTaskResultMultiply`,
    baseURL: 'http://localhost:5269/',
    data,
    ...requestConfig,
    headers: { 'Content-Type': 'application/*+json', ...requestConfig.headers },
  })
  return res
}

/**
 * {@link /Classification/WaitForClassificationTaskResultMultiply}
 */
export function usePostClassificationWaitforclassificationtaskresultmultiply<TContext>(
  options: {
    mutation?: UseMutationOptions<
      ResponseConfig<PostClassificationWaitforclassificationtaskresultmultiplyMutationResponse>,
      ResponseErrorConfig<Error>,
      { data?: PostClassificationWaitforclassificationtaskresultmultiplyMutationRequest },
      TContext
    > & { client?: QueryClient }
    client?: Partial<RequestConfig<PostClassificationWaitforclassificationtaskresultmultiplyMutationRequest>> & { client?: typeof client }
  } = {},
) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation
  const mutationKey = mutationOptions.mutationKey ?? postClassificationWaitforclassificationtaskresultmultiplyMutationKey()

  return useMutation<
    ResponseConfig<PostClassificationWaitforclassificationtaskresultmultiplyMutationResponse>,
    ResponseErrorConfig<Error>,
    { data?: PostClassificationWaitforclassificationtaskresultmultiplyMutationRequest },
    TContext
  >(
    {
      mutationFn: async ({ data }) => {
        return postClassificationWaitforclassificationtaskresultmultiply(data, config)
      },
      mutationKey,
      ...mutationOptions,
    },
    queryClient,
  )
}